"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransformVisitor = exports.mergeTransformer = exports.PathTransformVisitor = exports.ASTBuilderVisitor = exports.ASTTransformVisitor = void 0;
const base_1 = require("./base");
const as_1 = require("../as");
const astBuilder_1 = require("./astBuilder");
const path_1 = require("./path");
const ts_mixer_1 = require("ts-mixer");
const baseTransform_1 = require("./baseTransform");
class Transform extends as_1.Transform {
}
class ASTTransformVisitor extends ts_mixer_1.Mixin(base_1.BaseVisitor, Transform) {
}
exports.ASTTransformVisitor = ASTTransformVisitor;
class ASTBuilderVisitor extends ts_mixer_1.Mixin(astBuilder_1.ASTBuilder, Transform) {
}
exports.ASTBuilderVisitor = ASTBuilderVisitor;
class PathTransformVisitor extends ts_mixer_1.Mixin(path_1.PathVisitor, Transform) {
}
exports.PathTransformVisitor = PathTransformVisitor;
function mergeTransformer(from, to) {
    //@ts-ignore
    to.program = from.program;
    //@ts-ignore
    to.baseDir = from.baseDir;
    //@ts-ignore
    to.stdout = from.stdout;
    //@ts-ignore
    to.stderr = from.stderr;
    //@ts-ignore
    to.log = from.log;
    to.writeFile = from.writeFile;
    to.readFile = from.readFile;
    to.listFiles = from.listFiles;
}
exports.mergeTransformer = mergeTransformer;
class TransformVisitor extends ts_mixer_1.Mixin(baseTransform_1.BaseTransformVisitor, Transform) {
}
exports.TransformVisitor = TransformVisitor;
class Foo extends TransformVisitor {
    constructor() {
        super();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3JtZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdHJhbnNmb3JtZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUNBQXFDO0FBQ3JDLDhCQUFnRDtBQUNoRCw2Q0FBMEM7QUFDMUMsaUNBQXFDO0FBQ3JDLHVDQUFpQztBQUNqQyxtREFBdUQ7QUFFdkQsTUFBTSxTQUFVLFNBQVEsY0FBVTtDQUFHO0FBRXJDLE1BQWEsbUJBQW9CLFNBQVEsZ0JBQUssQ0FBQyxrQkFBVyxFQUFFLFNBQVMsQ0FBQztDQUFHO0FBQXpFLGtEQUF5RTtBQUV6RSxNQUFhLGlCQUFrQixTQUFRLGdCQUFLLENBQUMsdUJBQVUsRUFBRSxTQUFTLENBQUM7Q0FBRztBQUF0RSw4Q0FBc0U7QUFFdEUsTUFBYSxvQkFBcUIsU0FBUSxnQkFBSyxDQUFDLGtCQUFXLEVBQUUsU0FBUyxDQUFDO0NBQUc7QUFBMUUsb0RBQTBFO0FBRTFFLFNBQWdCLGdCQUFnQixDQUFDLElBQWUsRUFBRSxFQUFhO0lBQzdELFlBQVk7SUFDWixFQUFFLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDMUIsWUFBWTtJQUNaLEVBQUUsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUMxQixZQUFZO0lBQ1osRUFBRSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3hCLFlBQVk7SUFDWixFQUFFLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDeEIsWUFBWTtJQUNaLEVBQUUsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNsQixFQUFFLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDOUIsRUFBRSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQzVCLEVBQUUsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztBQUNoQyxDQUFDO0FBZEQsNENBY0M7QUFFRCxNQUFhLGdCQUFpQixTQUFRLGdCQUFLLENBQUMsb0NBQW9CLEVBQUUsU0FBUyxDQUFDO0NBQUc7QUFBL0UsNENBQStFO0FBRS9FLE1BQU0sR0FBSSxTQUFRLGdCQUFnQjtJQUNoQztRQUNFLEtBQUssRUFBRSxDQUFDO0lBQ1YsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZVZpc2l0b3IgfSBmcm9tIFwiLi9iYXNlXCI7XHJcbmltcG9ydCB7IFRyYW5zZm9ybSBhcyBfVHJhbnNmb3JtIH0gZnJvbSBcIi4uL2FzXCI7XHJcbmltcG9ydCB7IEFTVEJ1aWxkZXIgfSBmcm9tIFwiLi9hc3RCdWlsZGVyXCI7XHJcbmltcG9ydCB7IFBhdGhWaXNpdG9yIH0gZnJvbSBcIi4vcGF0aFwiO1xyXG5pbXBvcnQgeyBNaXhpbiB9IGZyb20gXCJ0cy1taXhlclwiO1xyXG5pbXBvcnQgeyBCYXNlVHJhbnNmb3JtVmlzaXRvciB9IGZyb20gXCIuL2Jhc2VUcmFuc2Zvcm1cIjtcclxuXHJcbmNsYXNzIFRyYW5zZm9ybSBleHRlbmRzIF9UcmFuc2Zvcm0ge31cclxuXHJcbmV4cG9ydCBjbGFzcyBBU1RUcmFuc2Zvcm1WaXNpdG9yIGV4dGVuZHMgTWl4aW4oQmFzZVZpc2l0b3IsIFRyYW5zZm9ybSkge31cclxuXHJcbmV4cG9ydCBjbGFzcyBBU1RCdWlsZGVyVmlzaXRvciBleHRlbmRzIE1peGluKEFTVEJ1aWxkZXIsIFRyYW5zZm9ybSkge31cclxuXHJcbmV4cG9ydCBjbGFzcyBQYXRoVHJhbnNmb3JtVmlzaXRvciBleHRlbmRzIE1peGluKFBhdGhWaXNpdG9yLCBUcmFuc2Zvcm0pIHt9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VUcmFuc2Zvcm1lcihmcm9tOiBUcmFuc2Zvcm0sIHRvOiBUcmFuc2Zvcm0pOiB2b2lkIHtcclxuICAvL0B0cy1pZ25vcmVcclxuICB0by5wcm9ncmFtID0gZnJvbS5wcm9ncmFtO1xyXG4gIC8vQHRzLWlnbm9yZVxyXG4gIHRvLmJhc2VEaXIgPSBmcm9tLmJhc2VEaXI7XHJcbiAgLy9AdHMtaWdub3JlXHJcbiAgdG8uc3Rkb3V0ID0gZnJvbS5zdGRvdXQ7XHJcbiAgLy9AdHMtaWdub3JlXHJcbiAgdG8uc3RkZXJyID0gZnJvbS5zdGRlcnI7XHJcbiAgLy9AdHMtaWdub3JlXHJcbiAgdG8ubG9nID0gZnJvbS5sb2c7XHJcbiAgdG8ud3JpdGVGaWxlID0gZnJvbS53cml0ZUZpbGU7XHJcbiAgdG8ucmVhZEZpbGUgPSBmcm9tLnJlYWRGaWxlO1xyXG4gIHRvLmxpc3RGaWxlcyA9IGZyb20ubGlzdEZpbGVzO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVHJhbnNmb3JtVmlzaXRvciBleHRlbmRzIE1peGluKEJhc2VUcmFuc2Zvcm1WaXNpdG9yLCBUcmFuc2Zvcm0pIHt9XHJcblxyXG5jbGFzcyBGb28gZXh0ZW5kcyBUcmFuc2Zvcm1WaXNpdG9yIHtcclxuICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgc3VwZXIoKTtcclxuICB9XHJcbn0iXX0=