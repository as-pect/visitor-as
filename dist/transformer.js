"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransformVisitor = exports.mergeTransformer = exports.PathTransformVisitor = exports.ASTBuilderVisitor = exports.ASTTransformVisitor = void 0;
/* eslint-disable @typescript-eslint/ban-ts-comment */
const base_1 = require("./base");
const as_1 = require("../as");
const astBuilder_1 = require("./astBuilder");
const path_1 = require("./path");
const ts_mixer_1 = require("ts-mixer");
const baseTransform_1 = require("./baseTransform");
class Transform extends as_1.Transform {
}
class ASTTransformVisitor extends ts_mixer_1.Mixin(base_1.BaseVisitor, Transform) {
}
exports.ASTTransformVisitor = ASTTransformVisitor;
class ASTBuilderVisitor extends ts_mixer_1.Mixin(astBuilder_1.ASTBuilder, Transform) {
}
exports.ASTBuilderVisitor = ASTBuilderVisitor;
class PathTransformVisitor extends ts_mixer_1.Mixin(path_1.PathVisitor, Transform) {
}
exports.PathTransformVisitor = PathTransformVisitor;
function mergeTransformer(from, to) {
    // @ts-ignore
    to.program = from.program;
    // @ts-ignore
    to.baseDir = from.baseDir;
    // @ts-ignore
    to.stdout = from.stdout;
    // @ts-ignore
    to.stderr = from.stderr;
    // @ts-ignore
    to.log = from.log;
    to.writeFile = from.writeFile;
    to.readFile = from.readFile;
    to.listFiles = from.listFiles;
}
exports.mergeTransformer = mergeTransformer;
class TransformVisitor extends ts_mixer_1.Mixin(baseTransform_1.BaseTransformVisitor, Transform) {
}
exports.TransformVisitor = TransformVisitor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3JtZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdHJhbnNmb3JtZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsc0RBQXNEO0FBQ3RELGlDQUFxQztBQUNyQyw4QkFBZ0Q7QUFDaEQsNkNBQTBDO0FBQzFDLGlDQUFxQztBQUNyQyx1Q0FBaUM7QUFDakMsbURBQXVEO0FBRXZELE1BQU0sU0FBVSxTQUFRLGNBQVU7Q0FBRztBQUVyQyxNQUFhLG1CQUFvQixTQUFRLGdCQUFLLENBQUMsa0JBQVcsRUFBRSxTQUFTLENBQUM7Q0FBRztBQUF6RSxrREFBeUU7QUFFekUsTUFBYSxpQkFBa0IsU0FBUSxnQkFBSyxDQUFDLHVCQUFVLEVBQUUsU0FBUyxDQUFDO0NBQUc7QUFBdEUsOENBQXNFO0FBRXRFLE1BQWEsb0JBQXFCLFNBQVEsZ0JBQUssQ0FBQyxrQkFBVyxFQUFFLFNBQVMsQ0FBQztDQUFHO0FBQTFFLG9EQUEwRTtBQUUxRSxTQUFnQixnQkFBZ0IsQ0FBQyxJQUFlLEVBQUUsRUFBYTtJQUM3RCxhQUFhO0lBQ2IsRUFBRSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQzFCLGFBQWE7SUFDYixFQUFFLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDMUIsYUFBYTtJQUNiLEVBQUUsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN4QixhQUFhO0lBQ2IsRUFBRSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3hCLGFBQWE7SUFDYixFQUFFLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDbEIsRUFBRSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzlCLEVBQUUsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUM1QixFQUFFLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7QUFDaEMsQ0FBQztBQWRELDRDQWNDO0FBRUQsTUFBYSxnQkFBaUIsU0FBUSxnQkFBSyxDQUFDLG9DQUFvQixFQUFFLFNBQVMsQ0FBQztDQUFHO0FBQS9FLDRDQUErRSIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudCAqL1xuaW1wb3J0IHsgQmFzZVZpc2l0b3IgfSBmcm9tIFwiLi9iYXNlXCI7XG5pbXBvcnQgeyBUcmFuc2Zvcm0gYXMgX1RyYW5zZm9ybSB9IGZyb20gXCIuLi9hc1wiO1xuaW1wb3J0IHsgQVNUQnVpbGRlciB9IGZyb20gXCIuL2FzdEJ1aWxkZXJcIjtcbmltcG9ydCB7IFBhdGhWaXNpdG9yIH0gZnJvbSBcIi4vcGF0aFwiO1xuaW1wb3J0IHsgTWl4aW4gfSBmcm9tIFwidHMtbWl4ZXJcIjtcbmltcG9ydCB7IEJhc2VUcmFuc2Zvcm1WaXNpdG9yIH0gZnJvbSBcIi4vYmFzZVRyYW5zZm9ybVwiO1xuXG5jbGFzcyBUcmFuc2Zvcm0gZXh0ZW5kcyBfVHJhbnNmb3JtIHt9XG5cbmV4cG9ydCBjbGFzcyBBU1RUcmFuc2Zvcm1WaXNpdG9yIGV4dGVuZHMgTWl4aW4oQmFzZVZpc2l0b3IsIFRyYW5zZm9ybSkge31cblxuZXhwb3J0IGNsYXNzIEFTVEJ1aWxkZXJWaXNpdG9yIGV4dGVuZHMgTWl4aW4oQVNUQnVpbGRlciwgVHJhbnNmb3JtKSB7fVxuXG5leHBvcnQgY2xhc3MgUGF0aFRyYW5zZm9ybVZpc2l0b3IgZXh0ZW5kcyBNaXhpbihQYXRoVmlzaXRvciwgVHJhbnNmb3JtKSB7fVxuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VUcmFuc2Zvcm1lcihmcm9tOiBUcmFuc2Zvcm0sIHRvOiBUcmFuc2Zvcm0pOiB2b2lkIHtcbiAgLy8gQHRzLWlnbm9yZVxuICB0by5wcm9ncmFtID0gZnJvbS5wcm9ncmFtO1xuICAvLyBAdHMtaWdub3JlXG4gIHRvLmJhc2VEaXIgPSBmcm9tLmJhc2VEaXI7XG4gIC8vIEB0cy1pZ25vcmVcbiAgdG8uc3Rkb3V0ID0gZnJvbS5zdGRvdXQ7XG4gIC8vIEB0cy1pZ25vcmVcbiAgdG8uc3RkZXJyID0gZnJvbS5zdGRlcnI7XG4gIC8vIEB0cy1pZ25vcmVcbiAgdG8ubG9nID0gZnJvbS5sb2c7XG4gIHRvLndyaXRlRmlsZSA9IGZyb20ud3JpdGVGaWxlO1xuICB0by5yZWFkRmlsZSA9IGZyb20ucmVhZEZpbGU7XG4gIHRvLmxpc3RGaWxlcyA9IGZyb20ubGlzdEZpbGVzO1xufVxuXG5leHBvcnQgY2xhc3MgVHJhbnNmb3JtVmlzaXRvciBleHRlbmRzIE1peGluKEJhc2VUcmFuc2Zvcm1WaXNpdG9yLCBUcmFuc2Zvcm0pIHt9Il19