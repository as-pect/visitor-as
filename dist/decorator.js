"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VariableDecorator = exports.FunctionDecorator = exports.ClassDecorator = exports.Decorator = exports.TopLevelDecorator = exports.registerDecorator = void 0;
const transformer_1 = require("./transformer");
const utils_1 = require("./utils");
function registerDecorator(decorator) {
    TopLevelDecorator.registerVisitor(decorator);
    return TopLevelDecorator;
}
exports.registerDecorator = registerDecorator;
class TopLevelDecorator extends transformer_1.PathTransformVisitor {
    static registerVisitor(visitor) {
        TopLevelDecorator._visitor = visitor;
    }
    get visitor() {
        return TopLevelDecorator._visitor;
    }
    visitDecoratorNode(node) {
        if (this.visitor.decoratorMatcher(node)) {
            this.visitor.currentPath = this.currentParentPath;
            this.visitor.visit(this.currentParent);
        }
    }
    afterParse(_) {
        transformer_1.mergeTransformer(this, this.visitor);
        this.visit(this.program.sources.filter(this.visitor.sourceFilter));
    }
}
exports.TopLevelDecorator = TopLevelDecorator;
class Decorator extends transformer_1.PathTransformVisitor {
    /**
     * Default filter that removes library files
     */
    get sourceFilter() {
        return utils_1.not(utils_1.isLibrary);
    }
    get decoratorMatcher() {
        return (node) => utils_1.decorates(node, this.name);
    }
    get name() { return ""; }
    getDecorator(node) {
        return node.decorators && node.decorators.find(this.decoratorMatcher) || null;
    }
}
exports.Decorator = Decorator;
class ClassDecorator extends Decorator {
}
exports.ClassDecorator = ClassDecorator;
class FunctionDecorator extends Decorator {
}
exports.FunctionDecorator = FunctionDecorator;
class VariableDecorator extends Decorator {
}
exports.VariableDecorator = VariableDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb3JhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2RlY29yYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQ0FBdUU7QUFZdkUsbUNBQWtFO0FBRWxFLFNBQWdCLGlCQUFpQixDQUFDLFNBQTJCO0lBQzNELGlCQUFpQixDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM3QyxPQUFPLGlCQUFpQixDQUFDO0FBQzNCLENBQUM7QUFIRCw4Q0FHQztBQU9ELE1BQWEsaUJBQWtCLFNBQVEsa0NBQW9CO0lBR3pELE1BQU0sQ0FBQyxlQUFlLENBQUMsT0FBeUI7UUFDOUMsaUJBQWlCLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztJQUN2QyxDQUFDO0lBRUQsSUFBWSxPQUFPO1FBQ2pCLE9BQU8saUJBQWlCLENBQUMsUUFBUSxDQUFDO0lBQ3BDLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxJQUFtQjtRQUNwQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1lBQ2xELElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUN4QztJQUNILENBQUM7SUFFRCxVQUFVLENBQUMsQ0FBUztRQUNsQiw4QkFBZ0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUNyRSxDQUFDO0NBRUY7QUF2QkQsOENBdUJDO0FBRUQsTUFBc0IsU0FBVSxTQUFRLGtDQUFvQjtJQUMxRDs7T0FFRztJQUNILElBQUksWUFBWTtRQUNkLE9BQU8sV0FBRyxDQUFDLGlCQUFTLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRUQsSUFBSSxnQkFBZ0I7UUFDbEIsT0FBTyxDQUFDLElBQW1CLEVBQUUsRUFBRSxDQUFDLGlCQUFTLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUM1RCxDQUFDO0lBRUQsSUFBSSxJQUFJLEtBQWEsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRWpDLFlBQVksQ0FBQyxJQUEwQjtRQUNyQyxPQUFPLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksSUFBSSxDQUFDO0lBQ2hGLENBQUM7Q0FDRjtBQWpCRCw4QkFpQkM7QUFFRCxNQUFzQixjQUFlLFNBQVEsU0FBUztDQUlyRDtBQUpELHdDQUlDO0FBRUQsTUFBc0IsaUJBQWtCLFNBQVEsU0FBUztDQUV4RDtBQUZELDhDQUVDO0FBRUQsTUFBc0IsaUJBQWtCLFNBQVEsU0FBUztDQUV4RDtBQUZELDhDQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGF0aFRyYW5zZm9ybVZpc2l0b3IsIG1lcmdlVHJhbnNmb3JtZXIgfSBmcm9tIFwiLi90cmFuc2Zvcm1lclwiO1xyXG5pbXBvcnQge1xyXG4gIENsYXNzRGVjbGFyYXRpb24sXHJcbiAgRmllbGREZWNsYXJhdGlvbixcclxuICBNZXRob2REZWNsYXJhdGlvbixcclxuICBQYXJzZXIsXHJcbiAgVmFyaWFibGVEZWNsYXJhdGlvbixcclxuICBGdW5jdGlvbkRlY2xhcmF0aW9uLFxyXG4gIFNvdXJjZSxcclxuICBEZWNvcmF0b3JOb2RlLFxyXG4gIERlY2xhcmF0aW9uU3RhdGVtZW50LFxyXG59IGZyb20gXCIuLi9hc1wiO1xyXG5pbXBvcnQgeyBkZWNvcmF0ZXMsIG5vdCwgaXNMaWJyYXJ5LCBnZXREZWNvcmF0b3IgfSBmcm9tIFwiLi91dGlsc1wiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRGVjb3JhdG9yKGRlY29yYXRvcjogRGVjb3JhdG9yVmlzaXRvcikge1xyXG4gIFRvcExldmVsRGVjb3JhdG9yLnJlZ2lzdGVyVmlzaXRvcihkZWNvcmF0b3IpO1xyXG4gIHJldHVybiBUb3BMZXZlbERlY29yYXRvcjtcclxufVxyXG5cclxuaW50ZXJmYWNlIERlY29yYXRvclZpc2l0b3IgZXh0ZW5kcyBQYXRoVHJhbnNmb3JtVmlzaXRvciB7XHJcbiAgZGVjb3JhdG9yTWF0Y2hlcjogKG5vZGU6IERlY29yYXRvck5vZGUpID0+IGJvb2xlYW47XHJcbiAgc291cmNlRmlsdGVyOiAoczogU291cmNlKSA9PiBib29sO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVG9wTGV2ZWxEZWNvcmF0b3IgZXh0ZW5kcyBQYXRoVHJhbnNmb3JtVmlzaXRvciB7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgX3Zpc2l0b3I6IERlY29yYXRvclZpc2l0b3I7XHJcblxyXG4gIHN0YXRpYyByZWdpc3RlclZpc2l0b3IodmlzaXRvcjogRGVjb3JhdG9yVmlzaXRvcik6IHZvaWQge1xyXG4gICAgVG9wTGV2ZWxEZWNvcmF0b3IuX3Zpc2l0b3IgPSB2aXNpdG9yO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXQgdmlzaXRvcigpOiBEZWNvcmF0b3JWaXNpdG9yIHtcclxuICAgIHJldHVybiBUb3BMZXZlbERlY29yYXRvci5fdmlzaXRvcjtcclxuICB9XHJcblxyXG4gIHZpc2l0RGVjb3JhdG9yTm9kZShub2RlOiBEZWNvcmF0b3JOb2RlKSB7XHJcbiAgICBpZiAodGhpcy52aXNpdG9yLmRlY29yYXRvck1hdGNoZXIobm9kZSkpIHtcclxuICAgICAgdGhpcy52aXNpdG9yLmN1cnJlbnRQYXRoID0gdGhpcy5jdXJyZW50UGFyZW50UGF0aDtcclxuICAgICAgdGhpcy52aXNpdG9yLnZpc2l0KHRoaXMuY3VycmVudFBhcmVudCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhZnRlclBhcnNlKF86IFBhcnNlcik6IHZvaWQge1xyXG4gICAgbWVyZ2VUcmFuc2Zvcm1lcih0aGlzLCB0aGlzLnZpc2l0b3IpO1xyXG4gICAgdGhpcy52aXNpdCh0aGlzLnByb2dyYW0uc291cmNlcy5maWx0ZXIodGhpcy52aXNpdG9yLnNvdXJjZUZpbHRlcikpO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBEZWNvcmF0b3IgZXh0ZW5kcyBQYXRoVHJhbnNmb3JtVmlzaXRvciB7XHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBmaWx0ZXIgdGhhdCByZW1vdmVzIGxpYnJhcnkgZmlsZXNcclxuICAgKi9cclxuICBnZXQgc291cmNlRmlsdGVyKCk6IChzOiBTb3VyY2UpID0+IGJvb2wge1xyXG4gICAgcmV0dXJuIG5vdChpc0xpYnJhcnkpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGRlY29yYXRvck1hdGNoZXIoKTogKG5vZGU6IERlY29yYXRvck5vZGUpID0+IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIChub2RlOiBEZWNvcmF0b3JOb2RlKSA9PiBkZWNvcmF0ZXMobm9kZSwgdGhpcy5uYW1lKVxyXG4gIH1cclxuXHJcbiAgZ2V0IG5hbWUoKTogc3RyaW5nIHsgcmV0dXJuIFwiXCI7IH1cclxuXHJcbiAgZ2V0RGVjb3JhdG9yKG5vZGU6IERlY2xhcmF0aW9uU3RhdGVtZW50KTogRGVjb3JhdG9yTm9kZSB8IG51bGwge1xyXG4gICAgcmV0dXJuIG5vZGUuZGVjb3JhdG9ycyAmJiBub2RlLmRlY29yYXRvcnMuZmluZCh0aGlzLmRlY29yYXRvck1hdGNoZXIpIHx8IG51bGw7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ2xhc3NEZWNvcmF0b3IgZXh0ZW5kcyBEZWNvcmF0b3Ige1xyXG4gIGFic3RyYWN0IHZpc2l0RmllbGREZWNsYXJhdGlvbihub2RlOiBGaWVsZERlY2xhcmF0aW9uKTogdm9pZDtcclxuICBhYnN0cmFjdCB2aXNpdE1ldGhvZERlY2xhcmF0aW9uKG5vZGU6IE1ldGhvZERlY2xhcmF0aW9uKTogdm9pZDtcclxuICBhYnN0cmFjdCB2aXNpdENsYXNzRGVjbGFyYXRpb24obm9kZTogQ2xhc3NEZWNsYXJhdGlvbik6IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBGdW5jdGlvbkRlY29yYXRvciBleHRlbmRzIERlY29yYXRvciB7XHJcbiAgYWJzdHJhY3QgdmlzaXRGdW5jdGlvbkRlY2xhcmF0aW9uKG5vZGU6IEZ1bmN0aW9uRGVjbGFyYXRpb24pOiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVmFyaWFibGVEZWNvcmF0b3IgZXh0ZW5kcyBEZWNvcmF0b3Ige1xyXG4gIGFic3RyYWN0IHZpc2l0VmFyaWFibGVEZWNsYXJhdGlvbihub2RlOiBWYXJpYWJsZURlY2xhcmF0aW9uKTogdm9pZDtcclxufVxyXG4iXX0=