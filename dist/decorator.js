"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VariableDecorator = exports.FunctionDecorator = exports.ClassDecorator = exports.Decorator = exports.TopLevelDecorator = exports.registerDecorator = void 0;
const transformer_1 = require("./transformer");
const utils_1 = require("./utils");
function registerDecorator(decorator) {
    TopLevelDecorator.registerVisitor(decorator);
    return TopLevelDecorator;
}
exports.registerDecorator = registerDecorator;
class TopLevelDecorator extends transformer_1.PathTransformVisitor {
    static registerVisitor(visitor) {
        TopLevelDecorator._visitor = visitor;
    }
    get visitor() {
        return TopLevelDecorator._visitor;
    }
    visitDecoratorNode(node) {
        if (utils_1.decorates(node, this.visitor.name)) {
            this.visitor.currentPath = this.currentParentPath;
            this.visitor.visit(this.currentParent);
        }
    }
    afterParse(_) {
        transformer_1.mergeTransformer(this, this.visitor);
        this.visit(this.program.sources.filter(this.visitor.sourceFilter));
    }
}
exports.TopLevelDecorator = TopLevelDecorator;
class Decorator extends transformer_1.PathTransformVisitor {
    /**
     * Default filter that removes library files
     */
    get sourceFilter() {
        return utils_1.not(utils_1.isLibrary);
    }
    getDecorator(node) {
        return utils_1.getDecorator(node, this.name);
    }
}
exports.Decorator = Decorator;
class ClassDecorator extends Decorator {
}
exports.ClassDecorator = ClassDecorator;
class FunctionDecorator extends Decorator {
}
exports.FunctionDecorator = FunctionDecorator;
class VariableDecorator extends Decorator {
}
exports.VariableDecorator = VariableDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb3JhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2RlY29yYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQ0FBdUU7QUFZdkUsbUNBQWtFO0FBRWxFLFNBQWdCLGlCQUFpQixDQUFDLFNBQTJCO0lBQzNELGlCQUFpQixDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM3QyxPQUFPLGlCQUFpQixDQUFDO0FBQzNCLENBQUM7QUFIRCw4Q0FHQztBQU9ELE1BQWEsaUJBQWtCLFNBQVEsa0NBQW9CO0lBR3pELE1BQU0sQ0FBQyxlQUFlLENBQUMsT0FBeUI7UUFDOUMsaUJBQWlCLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztJQUN2QyxDQUFDO0lBRUQsSUFBWSxPQUFPO1FBQ2pCLE9BQU8saUJBQWlCLENBQUMsUUFBUSxDQUFDO0lBQ3BDLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxJQUFtQjtRQUNwQyxJQUFJLGlCQUFTLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1lBQ2xELElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUN4QztJQUNILENBQUM7SUFFRCxVQUFVLENBQUMsQ0FBUztRQUNsQiw4QkFBZ0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUNyRSxDQUFDO0NBRUY7QUF2QkQsOENBdUJDO0FBRUQsTUFBc0IsU0FBVSxTQUFRLGtDQUFvQjtJQUMxRDs7T0FFRztJQUNILElBQUksWUFBWTtRQUNkLE9BQU8sV0FBRyxDQUFDLGlCQUFTLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBSUQsWUFBWSxDQUFDLElBQTBCO1FBQ3JDLE9BQU8sb0JBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBRSxDQUFDO0lBQ3hDLENBQUM7Q0FDRjtBQWJELDhCQWFDO0FBRUQsTUFBc0IsY0FBZSxTQUFRLFNBQVM7Q0FJckQ7QUFKRCx3Q0FJQztBQUVELE1BQXNCLGlCQUFrQixTQUFRLFNBQVM7Q0FFeEQ7QUFGRCw4Q0FFQztBQUVELE1BQXNCLGlCQUFrQixTQUFRLFNBQVM7Q0FFeEQ7QUFGRCw4Q0FFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhdGhUcmFuc2Zvcm1WaXNpdG9yLCBtZXJnZVRyYW5zZm9ybWVyIH0gZnJvbSBcIi4vdHJhbnNmb3JtZXJcIjtcbmltcG9ydCB7XG4gIENsYXNzRGVjbGFyYXRpb24sXG4gIEZpZWxkRGVjbGFyYXRpb24sXG4gIE1ldGhvZERlY2xhcmF0aW9uLFxuICBQYXJzZXIsXG4gIFZhcmlhYmxlRGVjbGFyYXRpb24sXG4gIEZ1bmN0aW9uRGVjbGFyYXRpb24sXG4gIFNvdXJjZSxcbiAgRGVjb3JhdG9yTm9kZSxcbiAgRGVjbGFyYXRpb25TdGF0ZW1lbnQsXG59IGZyb20gXCIuLi9hc1wiO1xuaW1wb3J0IHsgZGVjb3JhdGVzLCBub3QsIGlzTGlicmFyeSwgZ2V0RGVjb3JhdG9yIH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRGVjb3JhdG9yKGRlY29yYXRvcjogRGVjb3JhdG9yVmlzaXRvcikge1xuICBUb3BMZXZlbERlY29yYXRvci5yZWdpc3RlclZpc2l0b3IoZGVjb3JhdG9yKTtcbiAgcmV0dXJuIFRvcExldmVsRGVjb3JhdG9yO1xufVxuXG5pbnRlcmZhY2UgRGVjb3JhdG9yVmlzaXRvciBleHRlbmRzIFBhdGhUcmFuc2Zvcm1WaXNpdG9yIHtcbiAgbmFtZTogc3RyaW5nO1xuICBzb3VyY2VGaWx0ZXI6IChzOiBTb3VyY2UpID0+IGJvb2w7XG59XG5cbmV4cG9ydCBjbGFzcyBUb3BMZXZlbERlY29yYXRvciBleHRlbmRzIFBhdGhUcmFuc2Zvcm1WaXNpdG9yIHtcbiAgcHJpdmF0ZSBzdGF0aWMgX3Zpc2l0b3I6IERlY29yYXRvclZpc2l0b3I7XG5cbiAgc3RhdGljIHJlZ2lzdGVyVmlzaXRvcih2aXNpdG9yOiBEZWNvcmF0b3JWaXNpdG9yKTogdm9pZCB7XG4gICAgVG9wTGV2ZWxEZWNvcmF0b3IuX3Zpc2l0b3IgPSB2aXNpdG9yO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXQgdmlzaXRvcigpOiBEZWNvcmF0b3JWaXNpdG9yIHtcbiAgICByZXR1cm4gVG9wTGV2ZWxEZWNvcmF0b3IuX3Zpc2l0b3I7XG4gIH1cblxuICB2aXNpdERlY29yYXRvck5vZGUobm9kZTogRGVjb3JhdG9yTm9kZSkge1xuICAgIGlmIChkZWNvcmF0ZXMobm9kZSwgdGhpcy52aXNpdG9yLm5hbWUpKSB7XG4gICAgICB0aGlzLnZpc2l0b3IuY3VycmVudFBhdGggPSB0aGlzLmN1cnJlbnRQYXJlbnRQYXRoO1xuICAgICAgdGhpcy52aXNpdG9yLnZpc2l0KHRoaXMuY3VycmVudFBhcmVudCk7XG4gICAgfVxuICB9XG5cbiAgYWZ0ZXJQYXJzZShfOiBQYXJzZXIpOiB2b2lkIHtcbiAgICBtZXJnZVRyYW5zZm9ybWVyKHRoaXMsIHRoaXMudmlzaXRvcik7XG4gICAgdGhpcy52aXNpdCh0aGlzLnByb2dyYW0uc291cmNlcy5maWx0ZXIodGhpcy52aXNpdG9yLnNvdXJjZUZpbHRlcikpO1xuICB9XG5cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIERlY29yYXRvciBleHRlbmRzIFBhdGhUcmFuc2Zvcm1WaXNpdG9yIHtcbiAgLyoqXG4gICAqIERlZmF1bHQgZmlsdGVyIHRoYXQgcmVtb3ZlcyBsaWJyYXJ5IGZpbGVzXG4gICAqL1xuICBnZXQgc291cmNlRmlsdGVyKCk6IChzOiBTb3VyY2UpID0+IGJvb2wge1xuICAgIHJldHVybiBub3QoaXNMaWJyYXJ5KTtcbiAgfVxuXG4gIGFic3RyYWN0IGdldCBuYW1lKCk6IHN0cmluZztcblxuICBnZXREZWNvcmF0b3Iobm9kZTogRGVjbGFyYXRpb25TdGF0ZW1lbnQpOiBEZWNvcmF0b3JOb2RlIHtcbiAgICByZXR1cm4gZ2V0RGVjb3JhdG9yKG5vZGUsIHRoaXMubmFtZSkhO1xuICB9XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDbGFzc0RlY29yYXRvciBleHRlbmRzIERlY29yYXRvciB7XG4gIGFic3RyYWN0IHZpc2l0RmllbGREZWNsYXJhdGlvbihub2RlOiBGaWVsZERlY2xhcmF0aW9uKTogdm9pZDtcbiAgYWJzdHJhY3QgdmlzaXRNZXRob2REZWNsYXJhdGlvbihub2RlOiBNZXRob2REZWNsYXJhdGlvbik6IHZvaWQ7XG4gIGFic3RyYWN0IHZpc2l0Q2xhc3NEZWNsYXJhdGlvbihub2RlOiBDbGFzc0RlY2xhcmF0aW9uKTogdm9pZDtcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEZ1bmN0aW9uRGVjb3JhdG9yIGV4dGVuZHMgRGVjb3JhdG9yIHtcbiAgYWJzdHJhY3QgdmlzaXRGdW5jdGlvbkRlY2xhcmF0aW9uKG5vZGU6IEZ1bmN0aW9uRGVjbGFyYXRpb24pOiB2b2lkO1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVmFyaWFibGVEZWNvcmF0b3IgZXh0ZW5kcyBEZWNvcmF0b3Ige1xuICBhYnN0cmFjdCB2aXNpdFZhcmlhYmxlRGVjbGFyYXRpb24obm9kZTogVmFyaWFibGVEZWNsYXJhdGlvbik6IHZvaWQ7XG59XG4iXX0=