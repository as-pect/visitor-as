"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VariableDecorator = exports.FunctionDecorator = exports.ClassDecorator = exports.Decorator = exports.TopLevelDecorator = exports.registerDecorator = void 0;
const transformer_1 = require("./transformer");
const utils_1 = require("./utils");
function registerDecorator(decorator) {
    TopLevelDecorator.registerVisitor(decorator);
    return TopLevelDecorator;
}
exports.registerDecorator = registerDecorator;
class TopLevelDecorator extends transformer_1.PathTransformVisitor {
    static registerVisitor(visitor) {
        TopLevelDecorator._visitor = visitor;
    }
    get visitor() {
        return TopLevelDecorator._visitor;
    }
    visitDecoratorNode(node) {
        if (utils_1.decorates(node, this.visitor.name)) {
            this.visitor.currentPath = this.currentParentPath;
            this.visitor.visit(this.currentParent);
        }
    }
    afterParse(_) {
        transformer_1.mergeTransformer(this, this.visitor);
        this.visit(this.program.sources.filter(this.visitor.sourceFilter));
    }
}
exports.TopLevelDecorator = TopLevelDecorator;
class Decorator extends transformer_1.PathTransformVisitor {
    /**
     * Default filter that removes library files
     */
    get sourceFilter() {
        return utils_1.not(utils_1.isLibrary);
    }
    getDecorator(node) {
        return utils_1.getDecorator(node, this.name);
    }
}
exports.Decorator = Decorator;
class ClassDecorator extends Decorator {
}
exports.ClassDecorator = ClassDecorator;
class FunctionDecorator extends Decorator {
}
exports.FunctionDecorator = FunctionDecorator;
class VariableDecorator extends Decorator {
}
exports.VariableDecorator = VariableDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb3JhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2RlY29yYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQ0FBdUU7QUFZdkUsbUNBQWtFO0FBRWxFLFNBQWdCLGlCQUFpQixDQUFDLFNBQTJCO0lBQzNELGlCQUFpQixDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM3QyxPQUFPLGlCQUFpQixDQUFDO0FBQzNCLENBQUM7QUFIRCw4Q0FHQztBQU9ELE1BQWEsaUJBQWtCLFNBQVEsa0NBQW9CO0lBR3pELE1BQU0sQ0FBQyxlQUFlLENBQUMsT0FBeUI7UUFDOUMsaUJBQWlCLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztJQUN2QyxDQUFDO0lBRUQsSUFBWSxPQUFPO1FBQ2pCLE9BQU8saUJBQWlCLENBQUMsUUFBUSxDQUFDO0lBQ3BDLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxJQUFtQjtRQUNwQyxJQUFJLGlCQUFTLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1lBQ2xELElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUN4QztJQUNILENBQUM7SUFFRCxVQUFVLENBQUMsQ0FBUztRQUNsQiw4QkFBZ0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUNyRSxDQUFDO0NBRUY7QUF2QkQsOENBdUJDO0FBRUQsTUFBc0IsU0FBVSxTQUFRLGtDQUFvQjtJQUMxRDs7T0FFRztJQUNILElBQUksWUFBWTtRQUNkLE9BQU8sV0FBRyxDQUFDLGlCQUFTLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBSUQsWUFBWSxDQUFDLElBQTBCO1FBQ3JDLE9BQU8sb0JBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBRSxDQUFDO0lBQ3hDLENBQUM7Q0FDRjtBQWJELDhCQWFDO0FBRUQsTUFBc0IsY0FBZSxTQUFRLFNBQVM7Q0FJckQ7QUFKRCx3Q0FJQztBQUVELE1BQXNCLGlCQUFrQixTQUFRLFNBQVM7Q0FFeEQ7QUFGRCw4Q0FFQztBQUVELE1BQXNCLGlCQUFrQixTQUFRLFNBQVM7Q0FFeEQ7QUFGRCw4Q0FFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhdGhUcmFuc2Zvcm1WaXNpdG9yLCBtZXJnZVRyYW5zZm9ybWVyIH0gZnJvbSBcIi4vdHJhbnNmb3JtZXJcIjtcclxuaW1wb3J0IHtcclxuICBDbGFzc0RlY2xhcmF0aW9uLFxyXG4gIEZpZWxkRGVjbGFyYXRpb24sXHJcbiAgTWV0aG9kRGVjbGFyYXRpb24sXHJcbiAgUGFyc2VyLFxyXG4gIFZhcmlhYmxlRGVjbGFyYXRpb24sXHJcbiAgRnVuY3Rpb25EZWNsYXJhdGlvbixcclxuICBTb3VyY2UsXHJcbiAgRGVjb3JhdG9yTm9kZSxcclxuICBEZWNsYXJhdGlvblN0YXRlbWVudCxcclxufSBmcm9tIFwiLi4vYXNcIjtcclxuaW1wb3J0IHsgZGVjb3JhdGVzLCBub3QsIGlzTGlicmFyeSwgZ2V0RGVjb3JhdG9yIH0gZnJvbSBcIi4vdXRpbHNcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRlY29yYXRvcihkZWNvcmF0b3I6IERlY29yYXRvclZpc2l0b3IpIHtcclxuICBUb3BMZXZlbERlY29yYXRvci5yZWdpc3RlclZpc2l0b3IoZGVjb3JhdG9yKTtcclxuICByZXR1cm4gVG9wTGV2ZWxEZWNvcmF0b3I7XHJcbn1cclxuXHJcbmludGVyZmFjZSBEZWNvcmF0b3JWaXNpdG9yIGV4dGVuZHMgUGF0aFRyYW5zZm9ybVZpc2l0b3Ige1xyXG4gIG5hbWU6IHN0cmluZztcclxuICBzb3VyY2VGaWx0ZXI6IChzOiBTb3VyY2UpID0+IGJvb2w7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUb3BMZXZlbERlY29yYXRvciBleHRlbmRzIFBhdGhUcmFuc2Zvcm1WaXNpdG9yIHtcclxuICBwcml2YXRlIHN0YXRpYyBfdmlzaXRvcjogRGVjb3JhdG9yVmlzaXRvcjtcclxuXHJcbiAgc3RhdGljIHJlZ2lzdGVyVmlzaXRvcih2aXNpdG9yOiBEZWNvcmF0b3JWaXNpdG9yKTogdm9pZCB7XHJcbiAgICBUb3BMZXZlbERlY29yYXRvci5fdmlzaXRvciA9IHZpc2l0b3I7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldCB2aXNpdG9yKCk6IERlY29yYXRvclZpc2l0b3Ige1xyXG4gICAgcmV0dXJuIFRvcExldmVsRGVjb3JhdG9yLl92aXNpdG9yO1xyXG4gIH1cclxuXHJcbiAgdmlzaXREZWNvcmF0b3JOb2RlKG5vZGU6IERlY29yYXRvck5vZGUpIHtcclxuICAgIGlmIChkZWNvcmF0ZXMobm9kZSwgdGhpcy52aXNpdG9yLm5hbWUpKSB7XHJcbiAgICAgIHRoaXMudmlzaXRvci5jdXJyZW50UGF0aCA9IHRoaXMuY3VycmVudFBhcmVudFBhdGg7XHJcbiAgICAgIHRoaXMudmlzaXRvci52aXNpdCh0aGlzLmN1cnJlbnRQYXJlbnQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYWZ0ZXJQYXJzZShfOiBQYXJzZXIpOiB2b2lkIHtcclxuICAgIG1lcmdlVHJhbnNmb3JtZXIodGhpcywgdGhpcy52aXNpdG9yKTtcclxuICAgIHRoaXMudmlzaXQodGhpcy5wcm9ncmFtLnNvdXJjZXMuZmlsdGVyKHRoaXMudmlzaXRvci5zb3VyY2VGaWx0ZXIpKTtcclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRGVjb3JhdG9yIGV4dGVuZHMgUGF0aFRyYW5zZm9ybVZpc2l0b3Ige1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgZmlsdGVyIHRoYXQgcmVtb3ZlcyBsaWJyYXJ5IGZpbGVzXHJcbiAgICovXHJcbiAgZ2V0IHNvdXJjZUZpbHRlcigpOiAoczogU291cmNlKSA9PiBib29sIHtcclxuICAgIHJldHVybiBub3QoaXNMaWJyYXJ5KTtcclxuICB9XHJcblxyXG4gIGFic3RyYWN0IGdldCBuYW1lKCk6IHN0cmluZztcclxuXHJcbiAgZ2V0RGVjb3JhdG9yKG5vZGU6IERlY2xhcmF0aW9uU3RhdGVtZW50KTogRGVjb3JhdG9yTm9kZSB7XHJcbiAgICByZXR1cm4gZ2V0RGVjb3JhdG9yKG5vZGUsIHRoaXMubmFtZSkhO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENsYXNzRGVjb3JhdG9yIGV4dGVuZHMgRGVjb3JhdG9yIHtcclxuICBhYnN0cmFjdCB2aXNpdEZpZWxkRGVjbGFyYXRpb24obm9kZTogRmllbGREZWNsYXJhdGlvbik6IHZvaWQ7XHJcbiAgYWJzdHJhY3QgdmlzaXRNZXRob2REZWNsYXJhdGlvbihub2RlOiBNZXRob2REZWNsYXJhdGlvbik6IHZvaWQ7XHJcbiAgYWJzdHJhY3QgdmlzaXRDbGFzc0RlY2xhcmF0aW9uKG5vZGU6IENsYXNzRGVjbGFyYXRpb24pOiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRnVuY3Rpb25EZWNvcmF0b3IgZXh0ZW5kcyBEZWNvcmF0b3Ige1xyXG4gIGFic3RyYWN0IHZpc2l0RnVuY3Rpb25EZWNsYXJhdGlvbihub2RlOiBGdW5jdGlvbkRlY2xhcmF0aW9uKTogdm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFZhcmlhYmxlRGVjb3JhdG9yIGV4dGVuZHMgRGVjb3JhdG9yIHtcclxuICBhYnN0cmFjdCB2aXNpdFZhcmlhYmxlRGVjbGFyYXRpb24obm9kZTogVmFyaWFibGVEZWNsYXJhdGlvbik6IHZvaWQ7XHJcbn1cclxuIl19