"use strict";
const utils_1 = require("../utils");
const decorator_1 = require("../decorator");
class CapitalizeVisitor extends decorator_1.VariableDecorator {
    visitVariableDeclaration(node) {
        this.visit(node.initializer);
    }
    get decoratorMatcher() {
        return (node) => utils_1.decorates(node, "capitalize");
    }
    visitStringLiteralExpression(node) {
        const oldValue = node.value;
        node.value = node.value.toUpperCase();
        this.stdout.write(oldValue + " -> " + node.value + "\n");
    }
    visitTemplateLiteralExpression(node) {
        if (node.parts.length == 1 && node.expressions.length == 0) {
            const oldValue = node.parts[0];
            node.parts[0] = node.parts[0].toUpperCase();
            this.stdout.write(oldValue + " -> " + node.parts[0] + "\n");
        }
    }
}
module.exports = decorator_1.registerDecorator(new CapitalizeVisitor());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FwaXRhbGl6ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leGFtcGxlcy9jYXBpdGFsaXplLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvQ0FBZ0Q7QUFDaEQsNENBQW9FO0FBR3BFLE1BQU0saUJBQWtCLFNBQVEsNkJBQWlCO0lBQy9DLHdCQUF3QixDQUFDLElBQXlCO1FBQ2hELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCxJQUFJLGdCQUFnQjtRQUNsQixPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxpQkFBUyxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsNEJBQTRCLENBQUMsSUFBNkI7UUFDeEQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUM1QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDdEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCw4QkFBOEIsQ0FBQyxJQUErQjtRQUM1RCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUM7WUFDekQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQixJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDNUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO1NBQzdEO0lBQ0gsQ0FBQztDQUNGO0FBRUQsaUJBQVMsNkJBQWlCLENBQUMsSUFBSSxpQkFBaUIsRUFBRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjbG9uZU5vZGUsIGRlY29yYXRlcyB9IGZyb20gXCIuLi91dGlsc1wiO1xyXG5pbXBvcnQgeyBWYXJpYWJsZURlY29yYXRvciwgcmVnaXN0ZXJEZWNvcmF0b3IgfSBmcm9tIFwiLi4vZGVjb3JhdG9yXCI7XHJcbmltcG9ydCB7IERlY29yYXRvck5vZGUsIFN0cmluZ0xpdGVyYWxFeHByZXNzaW9uLCBUZW1wbGF0ZUxpdGVyYWxFeHByZXNzaW9uLCBWYXJpYWJsZURlY2xhcmF0aW9uIH0gZnJvbSBcIi4uLy4uL2FzXCI7XHJcblxyXG5jbGFzcyBDYXBpdGFsaXplVmlzaXRvciBleHRlbmRzIFZhcmlhYmxlRGVjb3JhdG9yIHtcclxuICB2aXNpdFZhcmlhYmxlRGVjbGFyYXRpb24obm9kZTogVmFyaWFibGVEZWNsYXJhdGlvbik6IHZvaWQge1xyXG4gICAgdGhpcy52aXNpdChub2RlLmluaXRpYWxpemVyKTtcclxuICB9XHJcblxyXG4gIGdldCBkZWNvcmF0b3JNYXRjaGVyKCk6IChub2RlOiBEZWNvcmF0b3JOb2RlKSA9PiBib29sZWFuIHtcclxuICAgIHJldHVybiAobm9kZSkgPT4gZGVjb3JhdGVzKG5vZGUsIFwiY2FwaXRhbGl6ZVwiKTtcclxuICB9XHJcblxyXG4gIHZpc2l0U3RyaW5nTGl0ZXJhbEV4cHJlc3Npb24obm9kZTogU3RyaW5nTGl0ZXJhbEV4cHJlc3Npb24pOiB2b2lkIHtcclxuICAgIGNvbnN0IG9sZFZhbHVlID0gbm9kZS52YWx1ZTsgXHJcbiAgICBub2RlLnZhbHVlID0gbm9kZS52YWx1ZS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgdGhpcy5zdGRvdXQud3JpdGUob2xkVmFsdWUgKyBcIiAtPiBcIiArIG5vZGUudmFsdWUgKyBcIlxcblwiKTtcclxuICB9XHJcbiAgXHJcbiAgdmlzaXRUZW1wbGF0ZUxpdGVyYWxFeHByZXNzaW9uKG5vZGU6IFRlbXBsYXRlTGl0ZXJhbEV4cHJlc3Npb24pOiB2b2lkIHtcclxuICAgIGlmIChub2RlLnBhcnRzLmxlbmd0aCA9PSAxICYmIG5vZGUuZXhwcmVzc2lvbnMubGVuZ3RoID09IDApe1xyXG4gICAgICBjb25zdCBvbGRWYWx1ZSA9IG5vZGUucGFydHNbMF07XHJcbiAgICAgIG5vZGUucGFydHNbMF0gPSBub2RlLnBhcnRzWzBdLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgIHRoaXMuc3Rkb3V0LndyaXRlKG9sZFZhbHVlICsgXCIgLT4gXCIgKyBub2RlLnBhcnRzWzBdICsgXCJcXG5cIik7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgPSByZWdpc3RlckRlY29yYXRvcihuZXcgQ2FwaXRhbGl6ZVZpc2l0b3IoKSk7XHJcbiJdfQ==