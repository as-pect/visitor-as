"use strict";
const utils_1 = require("../utils");
const decorator_1 = require("../decorator");
class CapitalizeVisitor extends decorator_1.VariableDecorator {
    visitVariableDeclaration(node) {
        this.visit(node.initializer);
    }
    get name() {
        return "capitalize";
    }
    visitStringLiteralExpression(node) {
        const newNode = utils_1.cloneNode(node);
        newNode.value = node.value.toUpperCase();
        this.replaceCurrentNode(newNode);
        this.stdout.write(node.value + " -> " + newNode.value + "\n");
    }
    visitTemplateLiteralExpression(node) {
        if (node.parts.length == 1 && node.expressions.length == 0) {
            const newNode = utils_1.cloneNode(node);
            newNode.parts[0] = node.parts[0].toUpperCase();
            this.replaceCurrentNode(newNode);
            this.stdout.write(node.parts[0] + " -> " + newNode.parts[0] + "\n");
        }
    }
}
module.exports = decorator_1.registerDecorator(new CapitalizeVisitor());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FwaXRhbGl6ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leGFtcGxlcy9jYXBpdGFsaXplLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvQ0FBcUM7QUFDckMsNENBQW9FO0FBR3BFLE1BQU0saUJBQWtCLFNBQVEsNkJBQWlCO0lBQy9DLHdCQUF3QixDQUFDLElBQXlCO1FBQ2hELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCxJQUFJLElBQUk7UUFDTixPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBRUQsNEJBQTRCLENBQUMsSUFBNkI7UUFDeEQsTUFBTSxPQUFPLEdBQUcsaUJBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoQyxPQUFPLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDekMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxHQUFHLE9BQU8sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELDhCQUE4QixDQUFDLElBQStCO1FBQzVELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBQztZQUN6RCxNQUFNLE9BQU8sR0FBRyxpQkFBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2hDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUMvQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDakMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztTQUNyRTtJQUNILENBQUM7Q0FDRjtBQUVELGlCQUFTLDZCQUFpQixDQUFDLElBQUksaUJBQWlCLEVBQUUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xvbmVOb2RlIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgeyBWYXJpYWJsZURlY29yYXRvciwgcmVnaXN0ZXJEZWNvcmF0b3IgfSBmcm9tIFwiLi4vZGVjb3JhdG9yXCI7XG5pbXBvcnQgeyBTdHJpbmdMaXRlcmFsRXhwcmVzc2lvbiwgVGVtcGxhdGVMaXRlcmFsRXhwcmVzc2lvbiwgVmFyaWFibGVEZWNsYXJhdGlvbiB9IGZyb20gXCIuLi8uLi9hc1wiO1xuXG5jbGFzcyBDYXBpdGFsaXplVmlzaXRvciBleHRlbmRzIFZhcmlhYmxlRGVjb3JhdG9yIHtcbiAgdmlzaXRWYXJpYWJsZURlY2xhcmF0aW9uKG5vZGU6IFZhcmlhYmxlRGVjbGFyYXRpb24pOiB2b2lkIHtcbiAgICB0aGlzLnZpc2l0KG5vZGUuaW5pdGlhbGl6ZXIpO1xuICB9XG5cbiAgZ2V0IG5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gXCJjYXBpdGFsaXplXCI7XG4gIH1cblxuICB2aXNpdFN0cmluZ0xpdGVyYWxFeHByZXNzaW9uKG5vZGU6IFN0cmluZ0xpdGVyYWxFeHByZXNzaW9uKTogdm9pZCB7XG4gICAgY29uc3QgbmV3Tm9kZSA9IGNsb25lTm9kZShub2RlKTtcbiAgICBuZXdOb2RlLnZhbHVlID0gbm9kZS52YWx1ZS50b1VwcGVyQ2FzZSgpO1xuICAgIHRoaXMucmVwbGFjZUN1cnJlbnROb2RlKG5ld05vZGUpO1xuICAgIHRoaXMuc3Rkb3V0LndyaXRlKG5vZGUudmFsdWUgKyBcIiAtPiBcIiArIG5ld05vZGUudmFsdWUgKyBcIlxcblwiKTtcbiAgfVxuICBcbiAgdmlzaXRUZW1wbGF0ZUxpdGVyYWxFeHByZXNzaW9uKG5vZGU6IFRlbXBsYXRlTGl0ZXJhbEV4cHJlc3Npb24pOiB2b2lkIHtcbiAgICBpZiAobm9kZS5wYXJ0cy5sZW5ndGggPT0gMSAmJiBub2RlLmV4cHJlc3Npb25zLmxlbmd0aCA9PSAwKXtcbiAgICAgIGNvbnN0IG5ld05vZGUgPSBjbG9uZU5vZGUobm9kZSk7XG4gICAgICBuZXdOb2RlLnBhcnRzWzBdID0gbm9kZS5wYXJ0c1swXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgdGhpcy5yZXBsYWNlQ3VycmVudE5vZGUobmV3Tm9kZSk7XG4gICAgICB0aGlzLnN0ZG91dC53cml0ZShub2RlLnBhcnRzWzBdICsgXCIgLT4gXCIgKyBuZXdOb2RlLnBhcnRzWzBdICsgXCJcXG5cIik7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCA9IHJlZ2lzdGVyRGVjb3JhdG9yKG5ldyBDYXBpdGFsaXplVmlzaXRvcigpKTtcbiJdfQ==